#!/bin/bash


##################################################
# Don't edit this bit! Specific to Pawsey systems
if [ ! -z ${PAWSEY_OS+x} ] ; then
  pawsey="y"
  if [ "$(whoami)" == "maali" ] ; then
    basedir=${basedir:-"/pawsey/$PAWSEY_OS"}
    moduledir=${moduledir:-"$basedir/modulefiles/containers"}
  else
    basedir=${basedir:-"$MYGROUP/software/$PAWSEY_OS"}
    moduledir=${moduledir:-"$basedir/modulefiles/containers"}
  fi
fi
##################################################



# relevant variables - you can CUSTOMISE this
# basename for following variables
basedir=${basedir:-"/data/work/wrappie"}
# root directory for applications (images+wrappers)
rootdir=${rootdir:-"$basedir/containers"}
# root directory for modulefiles
moduledir=${moduledir:-"$basedir/modulefiles"}
# production directory for data/analyses. only used for final output. can be a comma separated list, e.g. "/data/work,/data/db"
workdir=${workdir:-"/data"}


# welcome screen
wrappie=${0##*/}
cat << EOU
$wrappie - a tool for automated deployment of applications using container wrappers and modulefiles

Using the following paths:
basedir : $basedir
rootdir : $rootdir
moduledir : $moduledir
workdir : $workdir

EOU


# prompt for list file
if [ $# -eq 0 ] ; then
 echo Please provide the name of the list file as an argument. Exiting.
 exit
elif [ ! -s $1 ] ; then
 echo List file $1 not found or empty. Exiting.
 exit
fi
listfile=$1


# some Pawsey specific settings
pawsey_load=""
if [ "$pawsey" == "y" ] ; then
  module load singularity
  pawsey_load="module load singularity"
fi

# create directories for applications and modulefiles
echo Creating root directory for applications $rootdir ..
mkdir -p $rootdir
echo Creating root directory for modulefiles $moduledir ..
mkdir -p $moduledir

# initialise list of tool directories
appdir_list=""


# main loop
# read the list of requirements and do stuff
while read line ; do

 # skip empty and # commented lines
 skip=$(echo $line | grep -e '^$' -e '^#' -c)
 if [ $skip -gt 0 ] ; then
  continue
 fi

 # is this line an image (0) or a command (1)?
 type=$(echo $line | grep '^-' -c)


 # it's an image
 if [ $type -eq 0 ] ; then
  # save name&infos
  echo ""
  image=$line
  siftmp=${image##*/}
  tool=${siftmp%:*}
  tag=${siftmp#*:}
  appdir="$rootdir/$tool/$tag"
  appdir_list+="${appdir}:"
  sif=${siftmp/:/_}.sif
  # initialise GPU flag for this image
  gpu=""
  # pull image
  echo Pulling container image $image ..
  mkdir -p $appdir
  singularity pull --dir $appdir $sif $image
  # create modulefile
  echo Creating modulefile for tool $tool tag $tag ..
  mkdir -p $moduledir/$tool
  cat << EOM >$moduledir/$tool/$tag
#%Module1.0######################################################################
##
## $tool modulefile
##
proc ModulesHelp { } {
    puts stderr "\tModule for tool $tool , tag $tag\n"
    puts stderr "\tThis module uses the container image $image."
}

module-whatis   "edits the PATH to use the tool $tool , tag $tag"

$pawsey_load
prepend-path     PATH            $appdir

EOM


 # it's a command, so create the wrapper script
 elif [ $type -eq 1 ] ; then
  cmd=${line#*-}
  cmd=${cmd##* }
  if [ "$cmd" == "GPU" ] ; then
    gpu="--nv "
    continue
  fi
  echo - Creating wrapper for command $cmd
  cat << EOW >$appdir/$cmd
#!/bin/bash

singularity exec $gpu$appdir/$sif $cmd "\$@"
EOW
  chmod +x $appdir/$cmd
 fi 

done < $listfile


# display information on how to configure shell environment
echo "
All done!"
if [ "$pawsey" != "y" ] ; then
  cat << EOD

For proper functioning of this setup, ensure these two definitions are in your ~/.bash_profile :

##############################
module use $moduledir   #$wrappie
export SINGULARITY_BINDPATH=\$SINGULARITY_BINDPATH,$workdir   #$wrappie
##############################
EOD
fi
echo ""

